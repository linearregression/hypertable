#summary Load Balancing Design
<wiki:toc/>

= Introduction =

The purpose of load balancing is to spread load across the range servers to maximize performance and availability.  

= `sys/RS_STATS` Table =

This will be a system table used to track load statistics for servers and ranges.  Load statistics will be computed and stored hourly.  To minimize the amount of data kept in this table, 24 samples will be kept for each range and 7*24 samples will be kept for each range server.  This will be achieved with the MAX_VERSIONS option of the column specifications.  The reason we use MAX_VERSIONS instead of TTL is so that when a system is shut down for long periods of time, it can be brought back up again and still have load data to work with.  The table will have the following row key format:
{{{
<server-id>[:<table-id>]
}}}
One problem to consider when deciding on a row key format is row overflow.  Let's assume that the system is managing a single very large table, each range server has 10K ranges, and the row key and value data for each sample is 1K.  With 24 samples, this puts each row in the RS_STATS table at about 10000*1000*24, or 240MB.  This is less than the 256MB max range size and considerably less with compression factored in.  The `RS_STATS` table will have the following schema:
{{{
create table RS_STATS (
  server,
  range,
  range_start_row,
  range_split,
  ACCESS GROUP server ( server ),
  ACCESS GROUP range ( range, range_start_row, range_split )
);
}}}

The columns in the range access group will have a qualifier that represents the end row of the range. 

= !RangeServer failure =

System ranges (e.g. METADATA, RS_STATS, etc.) will need to be recovered first.  The Master will maintain range server load information and will use that information to select lightly loaded servers to move the system ranges to.  If it does not have this information (e.g. the Master was recently restarted), it will randomly assign the system ranges.  The balancing operation cannot proceed until all of the system ranges have been recovered.

= Load Balancer =

The Master will include a load balancer.  It will come in the form of a class that is abstracted so that alternate balancers can be easily added.  It will open a scanner on the RS_STATS table and will also be feed regular monitoring data so that it can make sub-hour balancing decisions if it chooses to do so.  The LoadBalancer class will have a balance() method that gets called by the Master maintenance task which runs every 30 seconds.  If the balancer decides that balancing is necessary, it will commence a balance operation.  The balance operation will consist of the following steps:

  # The LoadBalancer will set a flag indicating that a balance operation is progress.  This will prevent the balancer from commencing another balance operation while another one is in progress.
  # A BALANCE_START MML entry will get written that includes all of the information necessary to carry out the rebalance operation (e.g. which ranges are being moved to which servers).
  # The asynchronous RangeServer::relinquish_range() method will be called for each range being moved in the balance operation.
  # When each range is relinquished, the master will be notified via it's Master::relinquish_range() method which will consult the balancer to determine which server it is assigned to.  Once it knows which server it is assigned to, it will write a RANGE_ASSIGNED MML entry and respond success to the relinquishing range server.  Then it will invoke the RangeServer::load_range() operation.  Upon successful completion it will write a RANGE_LOADED MML entry and inform the balancer that the range has been loaded.
# Once the last range has been assigned, the balancer will write a BALANCE_COMPLETE MML entry, unset the bit indicating that a balance is in progress, and continue normal operation.

= Balance Trigger: Load Imbalance =


= Balance Trigger: New Servers =


= Balance Operation =

MML entries

= Basic Balancer =


What if a server dies in the middle of a balance operation?
