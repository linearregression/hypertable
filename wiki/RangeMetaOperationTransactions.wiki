#summary Design of range meta-operation transactions
#labels Phase-Design

== Introduction ==

Ranges are assigned and re-assigned to !RangeServers by the following operations:

  * CREATE TABLE
  * Range split
  * Range migration

To ensure that each Range get assigned to a !RangeServer and that a Range doesn't accidentally get assigned to multiple !RangeServers, even in the face of failures, we've decided to implement a specialized form of range meta-operation transactions.  This document describes the design of this mechanism.

To support these range meta-operation "transactions", we've introduced two new commit logs:

  # RSML - !RangeServer Meta Log
  # MML - Master Meta Log

These logs are where all Range meta operations get recorded for the !RangeServers and Master, respectively.

-----

== Range Split ==

=== Originating !RangeServer ===

  * Decide to split range
  * Create a split log and append SPLIT_START entry to RSML (include split log location)
  * Atomically obtain split timestamp and install split log
  * Do major compaction
  * Quiesce updates
  * Close split log
  * Update METADATA for old range 
  * Append SPLIT_SHRUNK to RSML
  * Shrink cell cache
  * Shrink view onto cell stores
  * Un-quiesce updates
  * Notify Master of split
  * Upon receiving Error::OK response from Master write SPLIT_DONE entry in RSML

=== Master ===

  * Master::report_split() called by originating !RangeServer
  * Selects a !RangeServer for the newly split off range
  * Writes LOAD_START (with location of receiving !RangeServer) to MML
  * Update METADATA 'Location' column for range
  * Calls load_range() on receiving !RangeServer
  * Upon receipt of Error::OK, write LOAD_FINISH

=== Receiving !RangeServer ===

  * Create Range directory in DFS
  * Link split log into primary log
  * Append RANGE_LOADED in RSML
  * Replay split log
  * Add Range object to main map
  * Respond OK to Master

-----

== Range Move ==

-----

== Create Table ==

-----

== !RangeServer Restart (Fast Recovery) ==

-----

== !RangeServer Master Recovery ==