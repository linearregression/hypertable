#summary How to build and run Hypertable on Amazon EC2
<wiki:toc/>

== How to Create an EC2 Instance ==

The following steps got me up and running with a machine on EC2.  The following command created the machine instance.  The `ami-5c709435` parameter refers to a public AMI.  Check out the [http://developer.amazonwebservices.com/connect/kbcategory.jspa?categoryID=101 Public EC2 AMI Directory] for other images.  The `-k gsg-keypair` argument refers to the keypair generated with a previous run of the command `ec2-add-keypair gsg-keypair`.  See [http://docs.amazonwebservices.com/AWSEC2/latest/GettingStartedGuide/ Amazon EC2 Getting Started Guide] for help getting setup.  I cut and pasted the private key into the file `~/.ec2/id_rsa-gsg-keypair`

{{{
$ ec2-run-instances ami-5c709435 -k gsg-keypair 
RESERVATION               r-9c5aeaf5            724784214682 default
INSTANCE                  i-ccf678a5            ami-5c709435            pending gsg-keypair     0               m1.small 2009-02-03T05:50:57+0000 us-east-1a aki-a71cf9ce ari-a51cf9cc 
}}}

After waiting a bit, I ran the following command to obtain the instance ID and hostname.

{{{
$ ec2-describe-instances 
RESERVATION               r-9c5aeaf5                 724784214682                       default
INSTANCE                  i-ccf678a5                 ami-5c709435                       ec2-75-101-254-105.compute-1.amazonaws.com domU-12-31-38-00-6C-78.compute-1.internal running gsg-keypair 0  m1.small 2009-02-03T05:50:57+0000 us-east-1a aki-a71cf9ce ari-a51cf9cc 
}}}

I was then able to log into the system as root without a password with the following comand:

{{{
$ ssh -i .ec2/id_rsa-gsg-keypair ec2-75-101-254-105.compute-1.amazonaws.com -l root
}}}

To make my life easier, I created an account called 'doug', added myself to `/etc/sudoers`, then put my public ssh key into the `~doug/.ssh/authorized_keys` files.  This enabled me to log in without a password.

{{{
$ ssh -A ec2-75-101-254-105.compute-1.amazonaws.com
}}}

== Ubuntu Ibex Machine Setup (ami-5c709435) ==

_Basic Setup_

{{{
# apt-get update
# apt-get install g++ make cmake libboost-dev liblog4cpp5-dev git-core cronolog libgoogle-perftools-dev libevent-dev zlib1g-dev
# apt-get install libexpat1-dev liblog4cpp5-dev libboost-dev libdb4.6++-dev libncurses-dev libreadline5-dev
# wget http://internap.dl.sourceforge.net/sourceforge/sigar/hyperic-sigar-1.6.0.tar.gz
# tar -xzvf hyperic-sigar-1.6.0.tar.gz
# cp hyperic-sigar-1.6.0/sigar-bin/include/*.h /usr/local/include
# cp hyperic-sigar-1.6.0/sigar-bin/lib/libsigar-x86-linux.so /usr/local/lib/
# ldconfig
}}}

_Thrift Broker_

See this [http://wiki.apache.org/thrift/ThriftInstallation official thrift installation wiki page] for up-to-date installation information.
{{{
# apt-get install sun-java6-jdk
# update-java-alternatives --set java-6-sun
# apt-get install ant autoconf automake libtool bison flex pkg-config php5 ruby-dev libbit-vector-perl
# ln -f -s /bin/bash /bin/sh
# wget -O thrift.tgz http://tr.im/2r61  (See hypertable README for location of working Thrift snapshot)
# tar -xzvf thrift.tgz
# cd thrift
# ./bootstrap.sh
# ./configure
# make
# make install
# cd ~/thrift/lib/py
# make install
# cd ~/thrift/lib/perl
# perl Makefile.PL
# make install
}}}

== Building Hypertable and Running Tests ==
{{{
# mkdir src
# cd src
# git clone git://scm.hypertable.org/pub/repos/hypertable.git
# mkdir -p ../build/hypertable
# cd ../build/hypertable
# cmake -DPHPTHRIFT_ROOT=$HOME/thrift/lib/php/src ~/src/hypertable
# make
# make install
# make alltests
}}}