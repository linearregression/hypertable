#summary Design of a maintenance tool that checks and fixes the METADATA table.

= Introduction =

Under some unexpected situations, e.g. after recovery with incomplete meta logs (probably due to [https://issues.apache.org/jira/browse/HADOOP-4379 buggy underlying DFS]), the METADATA table might become inconsistent with range server states. It'd be nice to have a maintenance tool (we'll call it _htck_) that checks the consistency of METADATA and tries to fix it.

= Types of Common Inconsistencies =

 # Range is assigned to a range server, but the range server is unreachable<br/>This is common since auto recovery is not implemented yet. When a range server crashes, all of its ranges goes into this state before the server's restarted 
 # Range is assigned to a range server in the METADATA, while the range server denies it<br/>Possbile cause: fast recovery with incomplete meta log.
 # Range is unassigned<br/>Possible cause: range server crashes before a new range is successfully loaded and that the source range server metalog is incomplete.

= Preparation =

To find the actual reason of an inconsistency, the current information stored in the METADATA table is inadequate, e.g.:

  # It is OK if new ranges came from a split are unassigned before the master gets notified. While it is not if the range are assigned by the master to a range server but the server fails to load it. It's hard to tell the difference of these two situations without knowing the state of the range i.e. NEW or ASSIGNED.
  # It is hard to detect if a range is `lost' i.e. locates on a crashed server and needs recovery, if the crashed server is restarted and is alive again. The reason is due to the lack of generation information of range servers.

Thus I propose two new columns be added into the schema of METADATA table: state and generation.

Some possible states include: NEW, ASSIGNED and LOST (to be recovered), it'd be nice to define more states like READONLY and UNLOADED (HBase supports unloading a table completely from memory). The ASSIGNED state doesn't need to be explicitly specified as it is the default one.

The generation is a serial number that is strictly increasing. A range server must use a new generation number every time it restarts. For now I think It's OK to borrow the Hyperspace session id.

= Usage =

I decide to implement htck as a stand-alone tool instead of integrated into a master maintenance thread because it is simpler and more controllable. Administrators may run htck multiple times to make sure everything goes well or stop it half-way if the process takes too long. The command line usage of htck is:

{{{
   htck [-d] [-f]
}}}

By default, htck just checks the consistency of METADATA table, but doesn't try to fix it immediately. To do the real fix, an explicit command line switch '-f' must be used.

The check phase has two modes: fast scan (default) and deep scan (-d). The difference is, for every range deep scan inquires the corresponding range server to see if it is really there, which is much more time-consuming. See the following sections for more details.

= Design Details =

== Fast Scan ==

 # Reads a list of live range servers along with their generation numbers from Hyperspace
 # Scan the METADATA row by row to see if the corresponding range's location & generation columns match a live range server. 
 # If the match fails, check the state column to see if the range is NEW, LOST or UNLOADED, if so save and report the inconsistency, otherwise skip and proceed.

In more details: to deal with LOST portions of the METADATA table. Step 2 should take place in stages, i.e. first check /hyperspace/root, then the ROOT table, then second-level METADATA. 

== Deep Scan ==

Deep scan is the same as fast scan except that, for each range in the METADATA table, htck also inquires the corresponding range server to see if the range is there. This can be done by adding a new RPC method that returns true or false:

{{{
bool RangeServerClient::load_range(const sockaddr_in &addr, const TableIdentifier &table, const RangeSpec &range);
}}}

== Fix Phase ==

TBD.

== Potential Risks ==

A potential problem is that htck / master / range servers may read / update the METADATA table concurrently.

== Summary of Changes ==

to be continued...