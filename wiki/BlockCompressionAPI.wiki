API for block compression

{{{
  /**                                                                                                                                                            
   * Base class for compressed block header.                                                                                                                     
   */
  class BlockCompressionHeader {
  public:
    virtual ~BlockCompressionHeader() { return; }

    void set_magic(const char magic[12]) { memcpy(m_magic, magic, 12); }
    void get_magic(char magic[12]) { memcpy(magic, m_magic, 12); }

    void     set_length(uint32_t length) { m_length = length; }
    uint32_t get_length() { return m_length; }

    void     set_zlength(uint32_t zlength) { m_zlength = zlength; }
    uint32_t get_zlength() { return m_zlength; }

    void     set_checksum(uint16_t checksum) { m_checksum = checksum; }
    uint16_t get_checksum() { return m_checksum; }

    void     set_flags(uint16_t flags) { m_flags = flags; }
    void     set_flag(uint16_t flag) { m_flags |= flag; }
    void     unset_flag(uint16_t flag) { m_flags &= ~flag; }
    uint16_t get_flags() { return m_flags; }

    virtual size_t encoded_length() = 0;
    virtual void   encode(uint8_t **buf_ptr) = 0;
    virtual bool   decode(uint8_t **buf_ptr, size_t *remaining_ptr) = 0;

    enum Flags { FLAGS_UNCOMPRESSED=0x0001 };

  protected:
    char m_magic[12];
    uint32_t m_length;
    uint32_t m_zlength;
    uint16_t m_checksum;
    uint16_t m_flags;
  };



  /**                                                                                                                                                            
   * Abstract base class for block compression codecs.                                                                                                           
   */
  class BlockCompressionCodec {
  public:
    virtual ~BlockCompressionCodec() { return; }

    virtual int deflate(DynamicBuffer &input, DynamicBuffer &output, BlockCompressionHeader *header, size_t reserve=0) = 0;

    virtual int inflate(DynamicBuffer &input, DynamicBuffer &output, BlockCompressionHeader *header) = 0;
  };
}}}