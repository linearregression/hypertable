#summary Everything You Need to Know to get Up and Running with Hypertable
<wiki:toc/>

==Installing Hypertable via Binary Packages==

===Packaging Basics===

Hypertable can be installed via [http://package.hypertable.org/ binary packages].  The packages come bundled with nearly all of the dependent shared libraries.  The nice thing about this approach is that just two packages are required for linux, a 64-bit linux package and a 32-bit linux package.  The only requirement is that your system is built with glibc 2.4+ (released on March 6th 2006 and provides stack smashing protection).  If you're running an older distribution with pre 2.4 glibc, you can build your own binary packages by following the instructions in [#Appendix_B._How_To_Package].

System packages (`*.rpm`, `*.deb` and `*.dmg`) can be installed by users with root access.  For users without root access, the compressed archive `*.tar.bz2` can be unpacked in any directory the user has write permission.

RPM installation
{{{
rpm -i <package>.rpm
}}}
Debian installation
{{{
dpkg --install <package>.deb
}}}
Bzipped archive installation
{{{
tar jxvf <package>.tar.bz2
}}}
Mac installation:

 Double-click the `.dmg` file and follow the instructions

The RPM, Debian, and Mac packages will install Hypertable under a directory by the name of `/opt/hypertable/$VERSION` by default.  If you don't have root access or cannot modify the `/opt` directory, use the `.tar.bz2` archive to install Hypertable wherever you would like.

===Filesystem Hierarchy Standard===

The RPM and Debian packages will, as a post-install step, setup the installation to conform to the [http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard Filesystem Hierarchy Standard].  This involves moving the configuration directory under `/etc`,  creating the dynamic (or variable) output directories under `/var`, and then setting up symlinks to point from the installation to these FHS-compliant system directories.  For example, here's what the installation directory looks like after installing from the RPM package:
{{{
[doug@mothercompiler ~]$ ls -l /opt/hypertable/0.9.3.0/
total 16
drwxr-xr-x 2 doug doug 4096 Mar 23 15:45 bin
lrwxrwxrwx 1 doug doug   27 Mar 23 15:45 conf -> /etc/opt/hypertable/0.9.3.0
drwxr-xr-x 5 doug doug 4096 Mar 23 15:45 examples
lrwxrwxrwx 1 doug doug   30 Mar 23 15:45 fs -> /var/opt/hypertable/0.9.3.0/fs
lrwxrwxrwx 1 doug doug   38 Mar 23 15:45 hyperspace -> /var/opt/hypertable/0.9.3.0/hyperspace
drwxr-xr-x 9 doug doug 4096 Mar 23 15:45 include
drwxr-xr-x 7 doug doug 4096 Mar 23 15:45 lib
lrwxrwxrwx 1 doug doug   31 Mar 23 15:45 log -> /var/opt/hypertable/0.9.3.0/log
lrwxrwxrwx 1 doug doug   31 Mar 23 15:45 run -> /var/opt/hypertable/0.9.3.0/run
}}}

The `.dmg` and `.tar.bz2` install do not setup the installation to be FHS-compliant.  You can do this manually by running the `fhsize.sh` script.
{{{
sudo /opt/hypertable/0.9.3.0/bin/fhsize.sh
}}}

This step is not strictly necessary, so if you'd like to keep the installation cleanly under `/opt/hypertable/$VERSION` don't run `fhsize.sh`

===Finalizing the Installation===

After installation, make a symlink from `/opt/hypertable/current` to your current version.

{{{
cd /opt/hypertable
sudo ln -s 0.9.3.0 current
}}}

If you plan to run Hypertable as a different user, you will need to change the ownership of the installation files to the user that you will be running the software as.
{{{
sudo chown -R doug:users /opt/hypertable/0.9.3.0
sudo chown -R doug:users /etc/opt/hypertable/0.9.3.0
sudo chown -R doug:users /var/opt/hypertable/0.9.3.0
}}}

===Verifying the Installation===

Start the hypertable servers (in local/single node mode)
{{{
/opt/hypertable/current/bin/ht start all-servers local
DFS broker: available file descriptors: 1024
Started DFS Broker (local)
Started Hyperspace
Started Hypertable.Master
Started Hypertable.RangeServer
Started ThriftBroker
}}}

Use the Hypertable shell for experiments.  For an introduction to the commands available, see [HQLTutorial].

{{{
/opt/hypertable/current/bin/ht shell

Welcome to the hypertable command interpreter.
For information about Hypertable, visit http://www.hypertable.org/

Type 'help' for a list of commands, or 'help shell' for a
list of shell meta commands.

hypertable> 
}}}
{{{
hypertable> create table foo ( c1, c2 );
}}}
{{{
hypertable> show tables;
METADATA
foo
}}}
{{{
hypertable> insert into foo values("001", "c1", "totally"), ("000", "c1", "Hypertable"), ("001", "c2", "awesome"), ("000", "c2", "is");
}}}
{{{
hypertable> select * from foo;
000	c1	Hypertable
000	c2	is
001	c1	totally
001	c2	awesome
}}}
{{{
hypertable> drop table foo;
}}}

Finally, to shut everything down, use the stop-servers command:

{{{
/opt/hypertable/current/bin/ht stop-servers
}}}

==Deploying with Capistrano==

==Appendix A. Building From Source==

===Download the source===

You can either download a release source tar ball from the [http://hypertable.org/download.html download page] and unpack it in your source directory say ~/src:
{{{
cd ~/src
tar zxvf hypertable-0.9.3.0-alpha-src.tar.gz
}}}
or from our git repository:
{{{
cd ~/src
git clone git://scm.hypertable.org/pub/repos/hypertable.git
}}}

For the rest of the section, we assume that your hypertable source tree is `~/src/hypertable`

===Install the development environment===

Run the following script to setup up the dev environment with all of the dependent libraries:

{{{
~/src/hypertable/bin/src-utils/htbuild --install dev_env
}}}

If the above command does not work for your platform, you can setup the dev environment manually by following the steps shown for your platform in [http://code.google.com/p/hypertable/wiki/HowToBuild How to Build].

===Configure the build===

Assuming you want your build tree to be ~/build/hypertable
{{{
mkdir -p ~/build/hypertable
cd ~/build/hypertable
cmake ~/src/hypertable
}}}
By default, hypertable gets installed in `/opt/hypertable`. To install into your own install directory, say `$prefix`, you can use:
{{{
cmake -DCMAKE_INSTALL_PREFIX=$prefix ~/src/hypertable
}}}
By default the build is configured for debug. To make a release build for production/performance test/benchmark:
{{{
cmake -DCMAKE_BUILD_TYPE=Release ~/src/hypertable
}}}
To build shared libraries, e.g., for scripting language extensions:
{{{
cmake -DBUILD_SHARED_LIBS=ON ~/src/hypertable
}}}
Since PHP has no builtin package system, its thrift installation needs to be manually specified for ThriftBroker support:
{{{
cmake -DPHPTHRIFT_ROOT:STRING=/home/user/src/thrift/lib/php/src
}}}

===Build Hypertable binaries===
{{{
make
make install
}}}

==Appendix B. How To Package==