#summary Getting started with Hypertable in 5 minutes

= Introduction =

The latest release of Hypertable comes with a few binary packages, which can cut down significant amount of build time (including dependencies) if your platform is included (Linux (intel/amd x86 32 and 64-bit) and Mac OS X (intel only) in the list.

= Getting Started =

System packages (`*.rpm`, `*.deb` and `*.dmg`) are meant to be installed by system admins. For regular users, the `*.tar.bz2` is a good choice to start playing with Hypertable.

Unpack the `<package>.tar.bz2` in any directory:
{{{
tar jxvf <package>.tar.bz2
}}}

Start the hypertable servers (in local/single node mode)
{{{
<install_dir>/bin/ht start all-servers local
DFS broker: available file descriptors: 1024
Started DFS Broker (local)
Started Hyperspace
Started Hypertable.Master
Started Hypertable.RangeServer
Started ThriftBroker
}}}

Use the hypertable shell for experiments
{{{
<install_dir>/bin/ht hypertable

Welcome to the hypertable command interpreter.
For information about Hypertable, visit http://www.hypertable.org/

Type 'help' for a list of commands, or 'help shell' for a
list of shell meta commands.

hypertable> 
}}}

Use Jruby to experiment with Hypertable API (via ThriftBroker)
{{{
$ CLASSPATH=/opt/hypertable/0.9.2.6/lib/java/hypertable-0.9.2.6.jar:/opt/hypertabl/0.9.2.6/lib/java/log4j-1.2.13.jar:/opt/hypertable/0.9.2.6/lib/java/libthrift.jar jirb
irb(main):001:0> require 'java'
=> false
irb(main):002:0> include_class 'org.hypertable.thrift.ThriftClient'
=> ["org.hypertable.thrift.ThriftClient"]
irb(main):003:0> client = ThriftClient.create("localhost", 38080)
=> #<Java::OrgHypertableThrift::ThriftClient:0x180b22e @java_object=#<Java::JavaObject:0x89dd>>
irb(main):004:0> client.hql_query("show tables").results.each {|t| puts t }
METADATA
=> nil
irb(main):005:0> 
}}}